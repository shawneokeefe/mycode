#!/usr/bin/env python3
# ============================== TEMPLATE ==============================
# # input(""(\n)*#)                                     if response.isdigit():   response=int()   break   else: continue


# === LISTS & DICTIONARIES ===
# LIST var_name = ["value","value","value"]             slice ~var_name[0,-1]        list()


#from filename import filename       
#counter = 1
#for x in trivia["results"]
#    print(f"{counter}. {x['question']}")
#    counter += 1
#    all_answers = x["incorrect_answers"]
#    all_answers.append(x["correct_answer"]
#    random.shuffle(all_answers))
#    letters = ["A","B","C","D"]

#for letter,answer in zip(letters,all_ansers):           takes two lists it combines into single iterable
#    print((letter, answer)
#    bank.update({letter:answer})                        creates new list with letter as the key and answer a value
#    print()
#    input(">")
#    print()
#    if answer == x['']
#        print("Correct")
#    else:
#        print("Wrong")

# DICT lib_name = {"key": ["value"],"key":["value"]}    slice ~lib_name["key"][0], order irrelevant
#      lib_name.get("string","if fails")                ~.keys()    ~.values()    add~["key"] = "value"   ~.pop("key")
#                                                       lib_reformatted=", ".join(lib_name.keys())


# === PRINT ===
# PRINT(f"Insert text {'var/func'} here" )              print(r""" ABSOLUTE TEXT """) print(html.unescape(var/str))
#                                                       print("string","string"+" string", sep="&", end=" avoids auto new line")
#               ~ Write to File                         var=open("filename","w") print("", file=var)

# === CONDITIONALS ===
# if: elif: else:
# while (x)  and  (y):                                  continue (return to loop start)      break (end loop)    var +=1 (iterate)
# for i(every item) in object                           string (each char)     list (each element)    dict (key, dict[key])
#               ~ executed specific item                var="X" if list.lower().startswith("var")
#               ~ Range                                 range(start#,numafterlast#,step) provides list of # numbers

# === FILE OBJECTS ===
drac = open("345-0.txt","r")  
vt = open("vampytimes.txt","w")

count = 0

for x in drac:
    if "vampire" in x.lower():
       # print(x)
        count += 1  
        vt.write(x)
print(count)

#drac.readlines(listname)

vt.close()
drac.close()






# with open("filename","permission") as var:            autocloses file when indent ends
#   ~.write("New Text")
#   ~.readline()                                        create list of lines
#   ~.read())                                           reads entire, reads from end if done twice (store read as var to use)
#
#      *** SORT INTO FILES ***
#           APPENDS - CREATES DUPLICATE OUTPUT - USE FOR LOGS
# with open("source_file","r") as source_var
#    for element in source_var:
#        element = element.rstrip("\n")                  strip newline from right ~.lstrip - not needed if endswith incl \n
#        if element.endswith("sort_text\n"):
#            with open("dest_file1","a") as dest1_var:
#                dest1_var.write(element + "\n")
#        elif:
#
#           WRITES - SHOWS LATEST DATA
# with open("source_file","r") as source_var
#    dest1_var = open("dest_filename","w")
#
#    for element in source_file:
#        if element.endswith(".org/n"):
#            dest1_var.write(element)
#    dest1_var.close()




# return var_name.json()
# url = ""      resp= requests.get(url)                 if ~.status_code == 200: return ~.json()     (200 = success)
#


# ========== STANDARD LIBARY IMPORTS ==========         import filename.function (no .py req even if in filename)
import shutil   # shell utilities - to move files       shutil.copytree("s","d") ~.copy ~.move, relative path > exe in CWD (use os.chdir(""))
import os       # access to OS commands                 #os.system("")
import random   # create random values                  random()


# ========== DEFINING VARIABLES =========
#variable_name = "value"


# ========== BODY OF SCRIPT ==========
def main():                                             
    print("Test code.")
    print()


# ========== PREVENT EXECUTION ON IMPORT ==========     # import > executes ~.main                  name = name of script/file
if __name__ == "__main__":                              # indirect call (import) > this is False    ~__name__ auto-defined as __main__ ~attribute of module
#    main()                                                  

    while True:
        main()
        rerun = input("Run again?  (Y/N) \n>")
        if rerun.lower() != "y":
            break


