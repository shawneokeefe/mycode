#!/usr/bin/env python3
# ============================== TEMPLATE ==============================
# input(""(\n)*#)                                       if response.isdigit():   response=int()   break   else: continue
# var = ~.split("delimiter", max # of splits) 

# dir(function)                                         display possilbe functions/methods for function
# type(object)                                          display class type of object

# === API ===
# import requests
# url_var= "http://api.open-notify.org/astros.json"
# var_name = requests.get(url_var).json()

# === LISTS & DICTIONARIES ===
# LIST var_name = ["value","value","value"]             slice ~var_name[0,-1]        list()   ~.remove

#    --- TUPPLE --- list with parenthesis

from filename import filename       
counter = 1
for x in trivia["results"]
    print(f"{counter}. {x['question']}")
    counter += 1
    all_answers = x["incorrect_answers"]
    all_answers.append(x["correct_answer"]
    random.shuffle(all_answers))
    letters = ["A","B","C","D"]

for letter,answer in zip(letters,all_ansers):           takes two lists it combines into single iterable
    print((letter, answer)
    bank.update({letter:answer})                        creates new list with letter as the key and answer a value
    print()

    input(">")
    print()


    if answer == x['']
        print("Correct")
    else:
        print("Wrong")



# DICT lib_name = {"key": ["value"],"key":["value"]}    slice ~lib_name["key"][0], order irrelevant
#      lib_name.get("string","if fails")                ~.keys()    ~.values()    add~["key"] = "value"   ~.pop("key")
#                                                       lib_reformatted=", ".join(lib_name.keys())
#                                                        dict can use integers as keys (can look like a list element)

# === PRINT ===
# PRINT(f"Insert text {'var/func'} here" )              print(r""" ABSOLUTE TEXT """) print(html.unescape(var/str))
#                                                       print("string","string"+" string", sep="&", end=" avoids auto new line")
#               ~ Write to File                         var=open("filename","w") print("", file=var)

# === CONDITIONALS ===
# if: elif: else:
# while (x)  and  (y):                                  continue (return to loop start)      break (end loop)    var +=1 (iterate)
# for i(every item) in object                           string (char)     list (element)    dict (key)    foo (line)
#               ~ executed specific item                var="X" if list.lower().startswith("var")
#               ~ Range                                 range(start#,numafterlast#,step) provides list of # numbers

# === FILE OBJECTS ===
# foo = open("filename","permission")                   Write "w"   Read "r"   Append "a"  foo.close()
# with open("filename","permission") as foo:            autocloses file when indent ends
#   foo.write("New Text")
#   foo.readline()                                      create list of lines
#   var_read = foo.read())                              reads entire, reads from end if done twice (store read as var to use)
#
#      *** SORT INTO FILES ***
#           APPENDS - CREATES DUPLICATE OUTPUT - USE FOR LOGS
# with open("source_file","r") as source_var
#    for element in source_var:
#        element = element.rstrip("\n")                  strip newline from right ~.lstrip - not needed if endswith incl \n
#        if element.endswith("sort_text\n"):
#            with open("dest_file1","a") as dest1_var:
#                dest1_var.write(element + "\n")
#        elif:
#
#           WRITES - SHOWS LATEST DATA
# with open("source_file","r") as source_var
#    dest1_var = open("dest_filename","w")
#
#    for element in source_file:
#        if element.endswith(".org/n"):
#            dest1_var.write(element)
#    dest1_var.close()




# return var_name.json()
# url = ""      resp= requests.get(url)                 if ~.status_code == 200: return ~.json()     (200 = success)
#
# ============== FUNCTIONS ===============
#Passing an argument to a fuction
# def function_name(arg1, arg2):                        requires 2 arguments - they are positional (order of input matters)
#    content of function
# function_name(arg1, arg2)                             

#============== VARIABLES
x = y

# global x        put inside a function to declare that x in the function will use the global version
# return x, y     when function is done, brings variables outside
# x, y = function()    

# ===============ERRORS -                                List of Errors (Lab 58)       TypeError,  ~Value, ~Syntax, ~Key
# try:                                                   go to except if there is an error
# except TypeError:                                      if inside try, a specific type of error occurs, do this
# finally                                                do regardless of error or not


# ========== STANDARD LIBARY IMPORTS ==========         import filename.function (no .py req even if in filename)
import shutil        # shell util        shutil.copytree("s","d") ~.copy ~.move, relative path > exe in CWD (use os.chdir(""))
import os            # access to OS commands                 #os.system("")
import random as r   # create random values                  random()
import getpass       # get input without displaying on screen
#        *** EXTERNAL MODULES ***                       terminal: python3 -m pip install [modulename]
import pandas as pd  # data tools, uses data frames
        # Call Dataframe        DF_name =  pd.read_csv("FN", index_col=#)     read_excel   read_json
        # Drop Duplicates       DF_name.drop_duplicates(inplace=True) 
        # Sort (multiple)       sorted = DF_name.sort_values(["Column Name",...], ascending=False)
        # Head - Show top       DF_name.head(#)
        # Eliminate Col.        DF_named.drop.columns.difference([""])        1, in place=True
        # Export Data           .to_json
        # Concatenate           pd.concat([DF1, DF2])
import xlrd          # panda - read excel (xls)
import xlwt          # panda - write to excel (xls)
import openpyxl      # panda - w/r (xlsx)
# import pyexcel       # more basic than pandas
import matplotlib    # chart/graph data
        # Create  h             DF.plot(kind="barh"             plt.savefig("path/file", bbox_inches="tight")
import netifaces
        # netifaces.interfaces()            returns list of if
        # ~.ifaddresses("if_name")      returns dict for "if" > slicing varies to get IP address, so use AF
        # ~.AF_.....                    _LINK (ethernet / link layer IF)       _INET             INET6
import paramiko                         #library, has custom classes      open SSH connection and execute connections

    # mykey = paramiko.RSAKey.from_private_key_file("/home/student.ssh/id_rsa")     harvest private keys
    # with open("results.log", "a") as foo:
    #   for cred in cred_file:
            # conn = paramiko.SSHClient()                                                   object represents connection                 
            # conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())                    auto-accept host public key
            # label = "Connecting to... " + cred.get("un") + "@" + cred.get("ip")
            # foo.write(logdata)                                                            write to logfile


            # conn.connect(hostname=cred.get('ip'), username=cred.get("un"), pkey=mykey)    set attrib on obj
            # conn.exec_command("command_as_if_in_CLI")                                     automated actions >>> (ssh_stdin, ssh_stdout, ssh_stderr)      
            # conn.exec_command("touch /home/" + cred.get("un") + "/goodnews.everyone")
        
            # sessin, sessout, sesserr = conn.exe_command(ls /home/" + cred.get("un")       set 3 var from tupple results
            # stdin, stdout, stderr = conn.exec_command("command as if in CLI")             set 3 var from tupple results

            # logdata = sessout.read().decode('utf-8')                                      

            # stdout.read()
        
            #   
            # print(commandisssue(x, sshsession).decode('utf-8')                              tiny b (byte string) >>> actual string
            # sshsession.close() 
    # --- SFTP --- USING USERNAME & PASSWORD
    dest_ip = "10.10.2.4"
    dest_un = "fry"
    dest_pw = getpass.getpass()
    var_name = paramiko.Transport(des_ip, port)      # class object prepares file for moves
    var_name.connect(username=desip, password=dest_pw)
    conn = paramiko.SFTPClient.from_transport(var_name)                                                # open SFTP connection
    conn.put("source_results.log","dest_results.log")                                                    #source file, dest fil






#       --- DEVICE DICTIONARY
device_list = {}
ssh zoidberg@10.10.2.5
ssh bender@10.20.2.3




"be"
# ========== DEFINING VARIABLES =========
#variable_name = "value"


# ========== BODY OF SCRIPT ==========
def main():                                             
    print("Test code.")
    print()


# ========== PREVENT EXECUTION ON IMPORT ==========     # import > executes ~.main                  name = name of script/file
if __name__ == "__main__":                              # indirect call (import) > this is False    ~__name__ auto-defined as __main__ ~attribute of module
#    main()                                                  

    while True:
        main()
        rerun = input("Run again?  (Y/N) \n>")
        if rerun.lower() != "y":
            break

# ============= ANSIBLE ==============================   # MANAGES STATE OF REMOTE HOSTS (UPDATING)
# TASKS - Green (no change), Y (change), R (error)       # USES YAML FOR SCRIPT (PLAYBOOK)
name: move dem files
connection: ssh
hosts: gropu_name (or indiv names)
tasks: 
        name: create the dir_name dir    
        file: # file.py
            state: directory
            path
    - name: copy files in ___
    copy: # copy.py
        src: path
        dest: path          - if dir does not exist

# ansible-playbook name_of_playbook.yml -i file_name       # Launches playbook      -i (inventory)
source_file_name
[group_name]
name ansible_host=10.10.2.3 ansible_user=name ansible_python_interpreter=/usr/bin/python3

- name: Playbook - Install figlet
  hosts: planetexpress:!farnsworth   # remove farnsworth from the list of available hosts
  connection: ssh     # default is to use the connection plugin ssh.py
  gather_facts: yes   # default is yes

  tasks:
  - name: using apt to remove figlet
    apt:                                                                        module
        name:                                                                   parameter
            - figlet                                                            input
            - sl    (steam locomotive)                                                         
        state: absent    # this will REMOVE the application                     choice (all can use)
    become: yes