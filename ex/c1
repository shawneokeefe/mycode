#!/usr/bin/env python3

# ========== IMPORTS ==========
import os

# ========== DICTIONARIES / LISTS ===============
rooms = {
  'porch'        :{
                    'desc'       : 'MONTY HALL PORCH:\n  Your driver pulls up to the curb and you get out. Drizzling rain hastens you up the steps to Monty Hall.\n  Renovated in the last three months, the old estate was awash with lights and pouring with music.\n  Costumed up for the bootleg era, you are eager to join your co-workers in the interactive mystery murder theater.',
                    'go'         : ['move', 'reception', 'GO to the reception'],
                    'return'     : ['move', 'curb', 'RETURN to the curb'],
                    'check'      : ['act', 'CHECK your invitation', 'Hmmm. Surely it was here? Did I leave it on the seat?'],
                  },
   'curb'        :{
                    'desc'       : 'CURBSIDE:\n  Your ride already left. Nothing at the curb except deep puddles, lamps, and trees swaying in the wind.',
                    'return'     : ['move', 'lobby', 'RETURN to Monty Hall'],
                    'call'       : ['act', 'CALL an uber and go home', 'Then again, maybe not. You came here to enjoy yourself. Might as well do it.'],
                    'jump'       : ['act', 'JUMP in the puddles', 'Splash, splash, splash!'],
                    'wet paper'  : ['item', 'wet paper', 'Dripping, but readable:\nHi. George and I are attending the opening night for the Monty Hall dinner/mystery theater on 4 May. I bet you already heard about the place, but do not forget to dress the part. We will be swinging the old-timesy fashion at 7pm./n /n Your seat is paid, so if you are late .../n I will kill you. LOL!/n /n  - Mirri'],
                  },
  'reception'    :{
                    'desc'       : 'RECEPTION:\n  You take off your fedora and clack into the polished halls of an impressive foyer overlooked by a deep gallery and steeped in jazz.\n  The wait staff perks up from behind a reception counter and gestures to you.\n "Hurry to the lounge on your left. Your party\'s mystery is about to kick off."',
                    'turn'       : ['move', 'lounge', 'TURN into the lounge'],
                    'wander'     : ['move', 'gallery', 'WANDER up the gallery'],
                    'mirri'      : ['act', '"Did MIRRI check in yet"','"Yes. She is ahead in the lounge. She got you the deluxe role tonight," the receptionist answered'],
                    'return'     : ['act', 'RETURN to the curb', 'Alas! You can see your ride already disappearing down the driveway.'],
                    'call'       : ['act', 'CALL your friends', 'Better luck shouting ... or just go into the lounge.'],
                    'check'      : ['act', 'CHECK your invitation', 'Hmm, where is it. Oh well, better just get moving.'],                 
                  },
  'gallery'      :{
                    'desc'       : 'GALLERY:\n  Taking your own time, you opt for a view from the gallery. The walls are littered with insets of period art,\n  memorabilia, and summaries of historical significance. Leaning over the railings, you imagine yourself as the host,\n  like a wealthy Jay Gatsby and patron of endless parties. As you stare into the scintillating chandelier,\n  the lights dash leaving you blind with a rainbowed afterimage. The music stopped and all is silent.',
                    'search'     : ['move', 'lobby', 'Carefully SEARCH your way downstairs'],
                    'wait'       : ['act', 'WAIT a moment', 'The false colors fade, but no time restores the lights. Only a small candle flickers from down below.', 'remove'],
                    'call'       : ['act', 'CALL out to the staff', 'No response. Perhaps the staff are in the lounge or backrooms.'],
                  },
        }
inventory =       {  
                    'cell phone' : ['item', 'cell phone', 'Powered, but only one bar here. Maybe I should climb a tree.'],
                    'lint'       : ['item', 'lint', 'Fluff. Always to be found when you need it.'],
                    'wallet'     : ['item', 'wallet', 'Cards ... check.\n Cash ... check.\n Breath mints ... darn.'],
                  }
item_desc =       {
                    'lint'       : 'Fluff. Always to be found when you need it.',
                    'wet paper'  : 'Dripping, but readable:\nHi. George and I are attending the opening night for the Monty Hall dinner/mystery theater on 4 May at 7pm. I bet you already heard about the place, but do not forget to dress the part. We will be swinging the old-timesy fashion at 7pm./n /n Your seat is paid, so if you are late .../n I will kill you. LOL!/n /n  - Mirri',
                    'candle'     : 'Mmmm! Pumpkin spice.',
                  }
remove_acts =     {
                    'invite'      : 'invite',
                  }
destroy_items =   {
                    'wet paper'   : 'wet paper',
                    'candle'      : 'candle',
                  }
# ========== INITIAL STATE ===============
current_room = 'porch'

# ========== STATUS SCREEN ==========
def status():
  os.system("clear")
  print('''
=======================================================================================================================
                                     ╔╦╗╔═╗╔╗╔╔╦╗╦ ╦  ╦ ╦╔═╗╦  ╦    ╔╦╗╦ ╦╦═╗╔╦╗╔═╗╦═╗
                                     ║║║║ ║║║║ ║ ╚╦╝  ╠═╣╠═╣║  ║    ║║║║ ║╠╦╝ ║║║╣ ╠╦╝
                                     ╩ ╩╚═╝╝╚╝ ╩  ╩   ╩ ╩╩ ╩╩═╝╩═╝  ╩ ╩╚═╝╩╚══╩╝╚═╝╩╚═
=======================================================================================================================''')
  print()
  print(rooms[current_room]['desc'], "\n")
  print('=======================================================================================================================')

  print(f"INVENTORY:  ", end="")
  for inv_elements in inventory.keys():
    print(f"{inv_elements.upper()}, ", end="")

  print("\nACTIONS:")
  for act_elements in rooms[current_room]:
    if rooms[current_room][act_elements][0] == "act":
      print(f" - {rooms[current_room][act_elements][1]}")
    if rooms[current_room][act_elements][0] == "move":
      print(f" - {rooms[current_room][act_elements][2]}")

  print(f"ITEMS:  ", end="")
  for elements in rooms[current_room]:
    if elements in rooms[current_room] and elements in item_desc:
      print(f"{elements.upper()},  ", end="")
  print()

  print('======================================================================================================================')
  print('======================================   Type a KEYWORD to make your actions.   ======================================', '\n')

# ========== GAME LOOP ===============
while True:
  status()

  choice = ''
  while choice == '':
    choice = input('> ',)
    choice = choice.lower()

    if choice == 'teleport':
      print("AVAILABLE ROOMS: ")
      for room_names in rooms.keys():
        print(f"{room_names}  ", end="")
      q_teleport = input("\n\n, Teleport to which room? \n> ")
      if q_teleport in rooms.keys():
        current_room = q_teleport
      else:
        choice = ''
        continue         
      break
    else:
      choice = ''
      continue

    if choice in rooms[current_room] and rooms[current_room][choice][0] == "item":         # ADD TO INVENTORY, REMOVE FROM ROOM
        inventory[choice] = ['item', rooms[current_room][choice][1], rooms[current_room][choice][0]]
        del rooms[current_room][choice]
        input(f"Added {choice.upper()} to inventory. Press enter to continue. \n")
        break

#    if choice in rooms[current_room] and choice in item_desc:         # ADD TO INVENTORY, REMOVE FROM ROOM
#        inventory[choice] = choice
#        del rooms[current_room][choice]
#        input(f"Added {choice.upper()} to inventory. Press enter to continue. \n")
#        break

    elif choice in inventory:                 # CHECK ITEM DESCRIPTION, DROP INTO ROOM
        print(f"{inventory[choice][2]}  \n")
        q_drop = input("Drop item? (Y/N) \n> ")
        if q_drop == "Y" or q_drop == "y":
          rooms[current_room][choice] = inventory[choice]          
          inventory.pop(choice)
          input(f"Dropped {choice.upper()}. Press enter to continue. \n")
        else:
          choice = ''
          continue
        break

#    elif choice in inventory and choice in item_desc:                 # CHECK ITEM DESCRIPTION, DROP INTO ROOM
#        print(f"{item_desc[choice]}  \n")
#        q_drop = input("Drop item? (Y/N) \n> ")
#        if q_drop == "Y" or q_drop == "y":
#          inventory.pop(choice)
#          rooms[current_room][choice] = choice
#          input(f"Dropped {choice.upper()}. Press enter to continue. \n")
#        else:
#          choice = ''
#          continue
#        break

    elif choice in rooms[current_room] and rooms[current_room][choice][0] == "move":
        current_room = rooms[current_room][choice][1]
        break

    elif choice in rooms[current_room] and rooms[current_room][choice][0] == "act":
        print(f"{rooms[current_room][choice][2]} \n")
        if "remove" not in rooms[current_room][choice]:
          choice = ''
          continue
        else:
          rooms[current_room].pop(choice)
          input("Press enter to continue.\n")
          choice = ''
          break

    else:
      print("Action not available.")
      choice = ''
      continue

  else: continue

